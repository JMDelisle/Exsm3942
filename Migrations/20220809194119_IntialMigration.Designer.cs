// <auto-generated />
using System;
using ClassroomStart.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ClassroomStart.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20220809194119_IntialMigration")]
    partial class IntialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_general_ci")
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");

            modelBuilder.Entity("ClassroomStart.Models.Account", b =>
                {
                    b.Property<int>("AccId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("acc_id");

                    b.Property<int>("AccAppliedinterest")
                        .HasColumnType("int(11)")
                        .HasColumnName("acc_appliedinterest");

                    b.Property<decimal>("AccBalance")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimals(5,2)")
                        .HasColumnName("acc_balance");

                    b.Property<int>("AccClientId")
                        .HasColumnType("int(11)")
                        .HasColumnName("acc_client_id");

                    b.Property<decimal>("AccDeposit")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10,0)")
                        .HasColumnName("acc_deposit");

                    b.Property<DateTime?>("AccInterestapplieddate")
                        .HasColumnType("datetime")
                        .HasColumnName("acc_interestapplieddate");

                    b.Property<int>("AccTypeId")
                        .HasColumnType("int(11)")
                        .HasColumnName("acc_type_id");

                    b.Property<decimal>("AccWithdraw")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10,0)")
                        .HasColumnName("acc_withdraw");

                    b.HasKey("AccId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "AccClientId" }, "acc_client_id");

                    b.HasIndex(new[] { "AccTypeId" }, "acc_type_id");

                    b.ToTable("account", (string)null);
                });

            modelBuilder.Entity("ClassroomStart.Models.Accounttype", b =>
                {
                    b.Property<int>("AtId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("at_id");

                    b.Property<decimal?>("AtInterestrate")
                        .IsRequired()
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("at_interestrate");

                    b.Property<string>("AtName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("at_name");

                    b.HasKey("AtId")
                        .HasName("PRIMARY");

                    b.ToTable("accounttype", (string)null);
                });

            modelBuilder.Entity("ClassroomStart.Models.Client", b =>
                {
                    b.Property<int>("CId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("c_id");

                    b.Property<DateOnly>("CBirthdate")
                        .HasColumnType("date")
                        .HasColumnName("c_birthdate");

                    b.Property<string>("CFirstname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("c_firstname");

                    b.Property<string>("CHomeaddress")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("c_homeaddress");

                    b.Property<string>("CLastname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("c_lastname");

                    b.HasKey("CId")
                        .HasName("PRIMARY");

                    b.ToTable("client", (string)null);
                });

            modelBuilder.Entity("ClassroomStart.Models.Account", b =>
                {
                    b.HasOne("ClassroomStart.Models.Client", "AccClient")
                        .WithMany("Accounts")
                        .HasForeignKey("AccClientId")
                        .IsRequired()
                        .HasConstraintName("account_ibfk_1");

                    b.HasOne("ClassroomStart.Models.Accounttype", "AccType")
                        .WithMany("Accounts")
                        .HasForeignKey("AccTypeId")
                        .IsRequired()
                        .HasConstraintName("account_ibfk_2");

                    b.Navigation("AccClient");

                    b.Navigation("AccType");
                });

            modelBuilder.Entity("ClassroomStart.Models.Client", b =>
                {
                    b.HasOne("ClassroomStart.Models.Account", "CIdNavigation")
                        .WithOne("Client")
                        .HasForeignKey("ClassroomStart.Models.Client", "CId")
                        .IsRequired()
                        .HasConstraintName("client_ibfk_1");

                    b.Navigation("CIdNavigation");
                });

            modelBuilder.Entity("ClassroomStart.Models.Account", b =>
                {
                    b.Navigation("Client")
                        .IsRequired();
                });

            modelBuilder.Entity("ClassroomStart.Models.Accounttype", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("ClassroomStart.Models.Client", b =>
                {
                    b.Navigation("Accounts");
                });
#pragma warning restore 612, 618
        }
    }
}
